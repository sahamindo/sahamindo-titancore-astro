---
import SEOLayout from '@layouts/SEOLayout.astro';
import { getCollection } from 'astro:content';
import { marketSectors } from '@data/categories';
import { generateSystemPageSEO, generateBreadcrumbJsonLd } from '@utils/seo';
import NewsArticle from '@components/news/NewsArticle.astro';

const allNews = await getCollection('news', ({ data }) => data.publish === true);
const sortedNews = allNews.sort((a, b) => 
  new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime()
);

// Get all unique stock symbols for filter
const allStockSymbols = [...new Set(
  allNews
    .filter(article => article.data.stockSymbols)
    .flatMap(article => article.data.stockSymbols!)
)].sort();

// Get all authors for filter
const allAuthors = [...new Set(allNews.map(article => article.data.author))].sort();

// Generate SEO metadata
const seo = generateSystemPageSEO('search');

// Generate breadcrumb JSON-LD
const breadcrumbJsonLd = generateBreadcrumbJsonLd([
  { name: 'Beranda', url: Astro.site!.toString() },
  { name: 'Pencarian', url: new URL('/cari', Astro.site).toString() }
]);

const additionalJsonLd = [breadcrumbJsonLd];
---

<SEOLayout seo={seo} additionalJsonLd={additionalJsonLd}>
  <main class="container mx-auto px-4 py-8">
    <!-- Search Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Pencarian Berita</h1>
      <p class="text-gray-600">Temukan berita saham dan analisis pasar modal Indonesia</p>
    </div>

    <!-- Search Form -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
      <form id="search-form" class="space-y-4">
        <!-- Main Search -->
        <div>
          <label for="search-query" class="block text-sm font-medium text-gray-700 mb-2">
            Kata Kunci
          </label>
          <input
            type="text"
            id="search-query"
            name="query"
            placeholder="Cari berita, kode saham (BBCA.JK), atau topik..."
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Filters Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <!-- Sector Filter -->
          <div>
            <label for="sector-filter" class="block text-sm font-medium text-gray-700 mb-1">
              Sektor
            </label>
            <select
              id="sector-filter"
              name="sector"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Sektor</option>
              {marketSectors.map(sector => (
                <option value={sector.id}>{sector.name}</option>
              ))}
            </select>
          </div>

          <!-- Stock Symbol Filter -->
          <div>
            <label for="stock-filter" class="block text-sm font-medium text-gray-700 mb-1">
              Kode Saham
            </label>
            <select
              id="stock-filter"
              name="stockSymbol"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Saham</option>
              {allStockSymbols.map(symbol => (
                <option value={symbol}>{symbol}</option>
              ))}
            </select>
          </div>

          <!-- Author Filter -->
          <div>
            <label for="author-filter" class="block text-sm font-medium text-gray-700 mb-1">
              Penulis
            </label>
            <select
              id="author-filter"
              name="author"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Penulis</option>
              {allAuthors.map(author => (
                <option value={author}>{author}</option>
              ))}
            </select>
          </div>

          <!-- Breaking News Filter -->
          <div>
            <label for="breaking-filter" class="block text-sm font-medium text-gray-700 mb-1">
              Jenis Berita
            </label>
            <select
              id="breaking-filter"
              name="isBreaking"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Semua Berita</option>
              <option value="true">Breaking News</option>
              <option value="false">Berita Reguler</option>
            </select>
          </div>
        </div>

        <!-- Date Range -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="date-from" class="block text-sm font-medium text-gray-700 mb-1">
              Dari Tanggal
            </label>
            <input
              type="date"
              id="date-from"
              name="dateFrom"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label for="date-to" class="block text-sm font-medium text-gray-700 mb-1">
              Sampai Tanggal
            </label>
            <input
              type="date"
              id="date-to"
              name="dateTo"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <!-- Search Button -->
        <div class="flex justify-between items-center">
          <button
            type="submit"
            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors"
          >
            üîç Cari Berita
          </button>
          <button
            type="button"
            id="clear-filters"
            class="text-gray-500 hover:text-gray-700 font-medium"
          >
            Reset Filter
          </button>
        </div>
      </form>
    </div>

    <!-- Search Results -->
    <div id="search-results" class="space-y-6">
      <!-- Results Header -->
      <div id="results-header" class="flex justify-between items-center border-b border-gray-200 pb-4">
        <div>
          <h2 class="text-xl font-semibold text-gray-900">Hasil Pencarian</h2>
          <p id="results-count" class="text-gray-600">Menampilkan semua berita terbaru</p>
        </div>
        <div>
          <select
            id="sort-order"
            class="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          >
            <option value="date-desc">Terbaru</option>
            <option value="date-asc">Terlama</option>
            <option value="relevance">Relevansi</option>
          </select>
        </div>
      </div>

      <!-- Results Grid -->
      <div id="results-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {sortedNews.slice(0, 12).map((article) => (
          <NewsArticle article={article} />
        ))}
      </div>

      <!-- Load More -->
      <div id="load-more-container" class="text-center">
        <button
          id="load-more"
          class="bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-6 rounded-lg transition-colors"
        >
          Muat Lebih Banyak
        </button>
      </div>

      <!-- No Results -->
      <div id="no-results" class="hidden text-center py-12">
        <div class="text-gray-400 text-6xl mb-4">üì∞</div>
        <h3 class="text-xl font-medium text-gray-900 mb-2">Tidak Ada Hasil</h3>
        <p class="text-gray-600 mb-4">Tidak ditemukan berita yang sesuai dengan kriteria pencarian Anda.</p>
        <p class="text-sm text-gray-500">
          Coba gunakan kata kunci yang berbeda atau kurangi filter yang digunakan.
        </p>
      </div>
    </div>

    <!-- Search Suggestions -->
    <div class="mt-12 bg-gray-50 rounded-lg p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">Pencarian Populer</h3>
      <div class="flex flex-wrap gap-2">
        {['BBCA.JK', 'TLKM.JK', 'GOTO.JK', 'dividen', 'IPO', 'merger', 'banking', 'consumer'].map(suggestion => (
          <button
            class="search-suggestion bg-white hover:bg-blue-50 text-gray-700 px-3 py-2 rounded-full border border-gray-200 text-sm transition-colors"
            data-suggestion={suggestion}
          >
            {suggestion}
          </button>
        ))}
      </div>
    </div>
  </main>
</SEOLayout>

<script>
  import { searchArticles, type SearchFilters } from '@utils/search';
  import type { CollectionEntry } from 'astro:content';

  // Get all articles data (passed from server)
  const allArticles: CollectionEntry<'news'>[] = JSON.parse(document.getElementById('articles-data')?.textContent || '[]');
  
  let currentResults: any[] = allArticles;
  let currentPage = 1;
  const resultsPerPage = 12;

  // DOM elements
  const searchForm = document.getElementById('search-form') as HTMLFormElement;
  const searchQuery = document.getElementById('search-query') as HTMLInputElement;
  const resultsGrid = document.getElementById('results-grid') as HTMLElement;
  const resultsCount = document.getElementById('results-count') as HTMLElement;
  const noResults = document.getElementById('no-results') as HTMLElement;
  const loadMoreBtn = document.getElementById('load-more') as HTMLButtonElement;
  const clearFiltersBtn = document.getElementById('clear-filters') as HTMLButtonElement;
  const sortOrder = document.getElementById('sort-order') as HTMLSelectElement;

  // Search function
  function performSearch() {
    const formData = new FormData(searchForm);
    const query = formData.get('query') as string || '';
    
    const filters: SearchFilters = {};
    if (formData.get('sector')) filters.sector = formData.get('sector') as string;
    if (formData.get('stockSymbol')) filters.stockSymbol = formData.get('stockSymbol') as string;
    if (formData.get('author')) filters.author = formData.get('author') as string;
    if (formData.get('isBreaking')) filters.isBreaking = formData.get('isBreaking') === 'true';
    if (formData.get('dateFrom')) filters.dateFrom = new Date(formData.get('dateFrom') as string);
    if (formData.get('dateTo')) filters.dateTo = new Date(formData.get('dateTo') as string);

    const searchResults = searchArticles(allArticles, query, filters);
    
    // Apply sorting
    const sortValue = sortOrder.value;
    if (sortValue === 'date-asc') {
      searchResults.sort((a, b) => 
        new Date(a.article.data.publishDate).getTime() - new Date(b.article.data.publishDate).getTime()
      );
    } else if (sortValue === 'date-desc') {
      searchResults.sort((a, b) => 
        new Date(b.article.data.publishDate).getTime() - new Date(a.article.data.publishDate).getTime()
      );
    }
    // 'relevance' is already sorted by search function

    currentResults = searchResults;
    currentPage = 1;
    displayResults();
  }

  // Display results
  function displayResults() {
    const startIndex = 0;
    const endIndex = currentPage * resultsPerPage;
    const pageResults = currentResults.slice(startIndex, endIndex);

    // Update results count
    const totalResults = currentResults.length;
    resultsCount.textContent = totalResults === 0 
      ? 'Tidak ada hasil ditemukan'
      : `Menampilkan ${Math.min(endIndex, totalResults)} dari ${totalResults} berita`;

    // Show/hide no results
    if (totalResults === 0) {
      resultsGrid.style.display = 'none';
      noResults.classList.remove('hidden');
      loadMoreBtn.style.display = 'none';
    } else {
      resultsGrid.style.display = 'grid';
      noResults.classList.add('hidden');
      
      // Render results (simplified - in real implementation would use proper templating)
      resultsGrid.innerHTML = pageResults.map(result => 
        `<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
          <!-- Article content would be rendered here -->
          <div class="p-4">
            <h3 class="font-semibold text-lg mb-2">${result.article.data.title}</h3>
            <p class="text-gray-600 text-sm mb-2">${result.article.data.excerpt}</p>
            <div class="flex justify-between items-center text-sm text-gray-500">
              <span>${result.article.data.author}</span>
              <span>${new Date(result.article.data.publishDate).toLocaleDateString('id-ID')}</span>
            </div>
          </div>
        </div>`
      ).join('');

      // Show/hide load more button
      loadMoreBtn.style.display = endIndex >= totalResults ? 'none' : 'block';
    }
  }

  // Event listeners
  searchForm.addEventListener('submit', (e) => {
    e.preventDefault();
    performSearch();
  });

  searchQuery.addEventListener('input', debounce(() => {
    if (searchQuery.value.length > 2 || searchQuery.value.length === 0) {
      performSearch();
    }
  }, 300));

  clearFiltersBtn.addEventListener('click', () => {
    searchForm.reset();
    performSearch();
  });

  loadMoreBtn.addEventListener('click', () => {
    currentPage++;
    displayResults();
  });

  sortOrder.addEventListener('change', performSearch);

  // Search suggestions
  document.querySelectorAll('.search-suggestion').forEach(btn => {
    btn.addEventListener('click', () => {
      const suggestion = btn.getAttribute('data-suggestion') || '';
      searchQuery.value = suggestion;
      performSearch();
    });
  });

  // Debounce function
  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Initial load
  performSearch();
</script>

<!-- Pass articles data to client -->
<script id="articles-data" type="application/json" set:html={JSON.stringify(sortedNews)} />